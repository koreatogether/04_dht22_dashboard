#!/usr/bin/env python3
"""
DHT22 Project Pre-commit Hook Setup Script
Automatically sets up Git pre-commit hooks.
"""

import os
import shutil
import stat
from pathlib import Path


def setup_precommit_hook() -> None:
    """Setup pre-commit hook"""
    project_root = Path(__file__).parent.parent.parent
    git_hooks_dir = project_root / ".git" / "hooks"
    precommit_script = Path(__file__).parent / "pre_commit.py"

    print("[TOOL] DHT22 Pre-commit Hook setup starting...")
    print(f"Project root: {project_root}")

    # Check .git/hooks directory
    if not git_hooks_dir.exists():
        print("[ERROR] Not a Git repository. Please run 'git init' first.")
        return False

    # pre-commit hook file path
    hook_file = git_hooks_dir / "pre-commit"

    # Backup existing hook
    if hook_file.exists():
        backup_file = git_hooks_dir / "pre-commit.backup"
        shutil.copy2(hook_file, backup_file)
        print(f"Backed up existing pre-commit hook: {backup_file}")

    # Write pre-commit hook script
    hook_content = f"""#!/bin/bash
# DHT22 Project Pre-commit Hook
# Auto-generated by: {Path(__file__).name}

echo "[SEARCH] DHT22 Pre-commit quality checks running..."

# Run Python script
python "{precommit_script.absolute()}"

# Allow/block commit based on script result
exit_code=$?

if [ $exit_code -eq 0 ]; then
    echo "[OK] Pre-commit checks passed. Proceeding with commit."
else
    echo "[ERROR] Pre-commit checks failed. Commit blocked."
fi

exit $exit_code
"""

    # Write hook file
    try:
        with open(hook_file, "w", encoding="utf-8", newline="\n") as f:
            f.write(hook_content)

        # Grant execute permission (Unix/Linux/Mac)
        if os.name != "nt":
            hook_file.chmod(hook_file.stat().st_mode | stat.S_IEXEC)

        print(f"[OK] Pre-commit hook configured: {hook_file}")

    except Exception as e:
        print(f"[ERROR] Hook setup failed: {e}")
        return False

    # Also create Windows batch file
    if os.name == "nt":
        batch_file = git_hooks_dir / "pre-commit.bat"
        batch_content = f"""@echo off
REM DHT22 Project Pre-commit Hook (Windows)
echo [SEARCH] DHT22 Pre-commit quality checks running...

python "{precommit_script.absolute()}"

if %ERRORLEVEL% EQU 0 (
    echo [OK] Pre-commit checks passed. Proceeding with commit.
) else (
    echo [ERROR] Pre-commit checks failed. Commit blocked.
)

exit /b %ERRORLEVEL%
"""

        try:
            with open(batch_file, "w", encoding="utf-8") as f:
                f.write(batch_content)
            print(f"[OK] Windows batch file also created: {batch_file}")
        except Exception as e:
            print(f"[WARNING] Windows batch file creation failed: {e}")

    return True


def test_precommit_hook() -> bool:
    """Test pre-commit hook"""
    print("\nPre-commit hook test execution...")

    project_root = Path(__file__).parent.parent.parent
    precommit_script = Path(__file__).parent / "pre_commit.py"

    try:
        import subprocess

        result = subprocess.run(
            ["python", str(precommit_script)],
            cwd=project_root,
            capture_output=True,
            text=True,
        )

        print("[DATA] Test results:")
        print(result.stdout)

        if result.stderr:
            print("[WARNING] Error output:")
            print(result.stderr)

        if result.returncode == 0:
            print("[OK] Pre-commit hook test successful!")
        else:
            print("[ERROR] Pre-commit hook test failed")

        return result.returncode == 0

    except Exception as e:
        print(f"Test execution error: {e}")
        return False


def show_usage_guide() -> None:
    """Show usage guide"""
    print(f"\n{'=' * 60}")
    print("DHT22 Pre-commit Hook Usage Guide")
    print("=" * 60)

    print("\n[TOOL] Setup complete!")
    print("Now 'git commit' will automatically run these checks:")

    print("\n[OK] Automatic checks:")
    print("  1. Code format check (Black)")
    print("  2. Lint check (Ruff)")
    print("  3. Type check (MyPy)")
    print("  4. Security scan")
    print("  5. Functional tests")
    print("  6. Documentation update verification")
    print("  7. Commit message verification")

    print("\n[TIP] Usage tips:")
    print("  - Errors will automatically block commits")
    print("  - Warnings don't block commits but review is recommended")
    print("  - Auto-fix commands will be provided")

    print("\n[SUCCESS] Recommended commit message format:")
    print("  feat: add new feature")
    print("  fix: bug fix")
    print("  docs: documentation update")
    print("  style: code style changes")
    print("  refactor: code refactoring")
    print("  test: add/modify tests")
    print("  chore: other tasks")

    print("\n[TOOL] Hook management:")
    print("  - Disable hook: git commit --no-verify")
    print("  - Reset hook: python tools/quality/setup_precommit.py")
    print("  - Test hook: python tools/quality/pre-commit.py")

    print("\n[RESULT] Check results:")
    print("  - Check results: tools/quality/results/precommit_results_*.json")

    print(f"\n{'=' * 60}")


def main() -> None:
    """Main function"""
    print("[SUCCESS] DHT22 Pre-commit Hook Setup Tool")
    print("=" * 50)

    # Setup pre-commit hook
    if setup_precommit_hook():
        print("\n[OK] Pre-commit hook setup complete!")

        # Run test
        if test_precommit_hook():
            print("\nAll setup completed successfully!")
        else:
            print("\nSome issues found in testing but hook is configured.")

        # Show usage guide
        show_usage_guide()

    else:
        print("\n[ERROR] Pre-commit hook setup failed.")
        return 1

    return 0


if __name__ == "__main__":
    exit(main())